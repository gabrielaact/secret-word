{"ast":null,"code":"var _jsxFileName = \"/home/gabriela/Documentos/curso react/secret-word/src/App.js\",\n  _s = $RefreshSig$();\n// CSS\nimport './App.css';\n\n// React\nimport { useCallback, useEffect, useState } from 'react';\n\n// data\nimport { wordsList } from './data/words';\n\n// components\nimport StartScreen from './components/StartScreen';\nimport Game from './components/Game';\nimport GameOver from './components/GameOver';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst stages = [{\n  id: 1,\n  name: \"start\"\n}, {\n  id: 2,\n  name: \"game\"\n}, {\n  id: 3,\n  name: \"end\"\n}];\nfunction App() {\n  _s();\n  const [gameStage, setGameStage] = useState(stages[0].name);\n  const [words] = useState(wordsList);\n  const [pickedWord, setPickedWord] = useState(\"\");\n  const [pickedCategory, setPickedCategory] = useState(\"\");\n  const [letters, setLetters] = useState([]);\n  const pickWordAndCategory = () => {\n    //pick a random category\n    const categories = Object.keys(words);\n    const category = categories[Math.floor(Math.random() * Object.keys(categories).length)];\n\n    //pick a random word\n    const word = words[category][Math.floor(Math.random() * words[category].length)];\n    return {\n      word,\n      category\n    };\n  };\n\n  //starts the game\n  const startGame = () => {\n    // pick word and pick category\n    const {\n      word,\n      category\n    } = pickWordAndCategory();\n\n    //create an array of letters\n    let wordLetters = word.split(\"\");\n    wordLetters = wordLetters.map(l => l.toLowerCase());\n    console.log(word, category);\n    console.log(wordLetters);\n    setGameStage(stages[1].name);\n  };\n\n  //process the letter input\n  const verifyLetter = () => {\n    setGameStage(stages[2].name);\n  };\n\n  //restarts the game\n  const retry = () => {\n    setGameStage(stages[0].name);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [gameStage === 'start' && /*#__PURE__*/_jsxDEV(StartScreen, {\n      startGame: startGame\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 33\n    }, this), gameStage === 'game' && /*#__PURE__*/_jsxDEV(Game, {\n      verifyLetter: verifyLetter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 32\n    }, this), gameStage === 'end' && /*#__PURE__*/_jsxDEV(GameOver, {\n      retry: retry\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 31\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"FO9IjgVpiSnPCohdDjL3G1hqqew=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useCallback","useEffect","useState","wordsList","StartScreen","Game","GameOver","jsxDEV","_jsxDEV","stages","id","name","App","_s","gameStage","setGameStage","words","pickedWord","setPickedWord","pickedCategory","setPickedCategory","letters","setLetters","pickWordAndCategory","categories","Object","keys","category","Math","floor","random","length","word","startGame","wordLetters","split","map","l","toLowerCase","console","log","verifyLetter","retry","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/gabriela/Documentos/curso react/secret-word/src/App.js"],"sourcesContent":["// CSS\nimport './App.css';\n\n// React\nimport { useCallback, useEffect, useState } from 'react';\n\n// data\nimport { wordsList } from './data/words';\n\n// components\nimport StartScreen from './components/StartScreen';\nimport Game from './components/Game';\nimport GameOver from './components/GameOver';\n\nconst stages = [\n  {id: 1, name: \"start\"},\n  {id: 2, name: \"game\"},\n  {id: 3, name: \"end\"}\n]\n\nfunction App() {\n  const [gameStage, setGameStage] = useState(stages[0].name);\n  const [words] = useState(wordsList);\n\n  const [pickedWord, setPickedWord] = useState(\"\");\n  const [pickedCategory, setPickedCategory] = useState(\"\");\n  const [letters, setLetters] = useState([]);\n\n  const pickWordAndCategory = () => {\n    //pick a random category\n    const categories = Object.keys(words);\n    const category = \n      categories[Math.floor(Math.random() * Object.keys(categories).length)];\n\n    //pick a random word\n    const word = \n      words[category][Math.floor(Math.random() * words[category].length)];\n\n    return {word, category};\n  }\n\n  //starts the game\n  const startGame = () => {\n    // pick word and pick category\n    const { word, category } = pickWordAndCategory();\n\n    //create an array of letters\n    let wordLetters = word.split(\"\");\n    wordLetters = wordLetters.map((l) => l.toLowerCase());\n\n    console.log(word, category);\n    console.log(wordLetters);\n\n    setGameStage(stages[1].name);\n  }\n\n  //process the letter input\n  const verifyLetter = () => {\n    setGameStage(stages[2].name);\n  }\n\n  //restarts the game\n  const retry = () => {\n    setGameStage(stages[0].name);\n  }\n\n  return (\n    <div className=\"App\">\n      {gameStage === 'start' && <StartScreen startGame={startGame}/>}\n      {gameStage === 'game' && <Game verifyLetter={verifyLetter} />}\n      {gameStage === 'end' && <GameOver retry={retry} />}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}