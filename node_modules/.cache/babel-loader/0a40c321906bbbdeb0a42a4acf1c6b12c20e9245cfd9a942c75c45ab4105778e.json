{"ast":null,"code":"var _jsxFileName = \"/home/gabriela/Documentos/curso react/secret-word/src/App.js\",\n  _s = $RefreshSig$();\n// CSS\nimport './App.css';\n\n// React\nimport { useCallback, useEffect, useState } from 'react';\n\n// data\nimport { wordsList } from './data/words';\n\n// components\nimport StartScreen from './components/StartScreen';\nimport Game from './components/Game';\nimport GameOver from './components/GameOver';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst stages = [{\n  id: 1,\n  name: \"start\"\n}, {\n  id: 2,\n  name: \"game\"\n}, {\n  id: 3,\n  name: \"end\"\n}];\nconst guessesNumber = 3;\nfunction App() {\n  _s();\n  const [gameStage, setGameStage] = useState(stages[0].name);\n  const [words] = useState(wordsList);\n  const [pickedWord, setPickedWord] = useState(\"\");\n  const [pickedCategory, setPickedCategory] = useState(\"\");\n  const [letters, setLetters] = useState([]);\n  const [guessedLetters, setGuessedLetters] = useState([]);\n  const [wrongLetters, setWrongLetters] = useState([]);\n  const [guesses, setGuesses] = useState(guessesNumber);\n  const [score, setScore] = useState(50);\n  const pickWordAndCategory = () => {\n    //pick a random category\n    const categories = Object.keys(words);\n    const category = categories[Math.floor(Math.random() * Object.keys(categories).length)];\n\n    //pick a random word\n    const word = words[category][Math.floor(Math.random() * words[category].length)];\n    return {\n      word,\n      category\n    };\n  };\n\n  //starts the game\n  const startGame = () => {\n    // pick word and pick category\n    const {\n      word,\n      category\n    } = pickWordAndCategory();\n\n    //create an array of letters\n    let wordLetters = word.split(\"\");\n    wordLetters = wordLetters.map(l => l.toLowerCase());\n\n    //fill states\n    setPickedWord(word);\n    setPickedCategory(category);\n    setLetters(wordLetters);\n    setGameStage(stages[1].name);\n  };\n\n  //process the letter input\n  const verifyLetter = letter => {\n    const normalizedLetter = letter.toLowerCase();\n\n    //check if letter has already been utilized\n    if (guessedLetters.includes(normalizedLetter) || wrongLetters.includes(normalizedLetter)) {\n      return;\n    }\n\n    //push guessed letter or remove a guess\n    if (letters.includes(normalizedLetter)) {\n      setGuessedLetters(actualGuessedLetters => [...actualGuessedLetters, normalizedLetter]);\n    } else {\n      setWrongLetters(actualWrongLetters => [...actualWrongLetters, normalizedLetter]);\n      setGuesses(actualGuesses => actualGuesses - 1);\n    }\n  };\n  const clearLetterStates = () => {\n    setGuessedLetters([]);\n    setWrongLetters([]);\n  };\n  useEffect(() => {\n    if (guesses <= 0) {\n      //reset all states\n      clearLetterStates();\n      setGameStage(stages[2].name);\n    }\n  }, [guesses]);\n\n  //restarts the game\n  const retry = () => {\n    setScore(0);\n    setGuesses(guessesNumber);\n    setGameStage(stages[0].name);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [gameStage === 'start' && /*#__PURE__*/_jsxDEV(StartScreen, {\n      startGame: startGame\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 33\n    }, this), gameStage === 'game' && /*#__PURE__*/_jsxDEV(Game, {\n      verifyLetter: verifyLetter,\n      pickedWord: pickedWord,\n      pickedCategory: pickedCategory,\n      letters: letters,\n      guessedLetters: guessedLetters,\n      wrongLetters: wrongLetters,\n      guesses: guesses,\n      score: score\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }, this), gameStage === 'end' && /*#__PURE__*/_jsxDEV(GameOver, {\n      retry: retry,\n      score: score\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 31\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"umBdK5VXNzflma5w4VTe2qsJ4HU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useCallback","useEffect","useState","wordsList","StartScreen","Game","GameOver","jsxDEV","_jsxDEV","stages","id","name","guessesNumber","App","_s","gameStage","setGameStage","words","pickedWord","setPickedWord","pickedCategory","setPickedCategory","letters","setLetters","guessedLetters","setGuessedLetters","wrongLetters","setWrongLetters","guesses","setGuesses","score","setScore","pickWordAndCategory","categories","Object","keys","category","Math","floor","random","length","word","startGame","wordLetters","split","map","l","toLowerCase","verifyLetter","letter","normalizedLetter","includes","actualGuessedLetters","actualWrongLetters","actualGuesses","clearLetterStates","retry","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/gabriela/Documentos/curso react/secret-word/src/App.js"],"sourcesContent":["// CSS\nimport './App.css';\n\n// React\nimport { useCallback, useEffect, useState } from 'react';\n\n// data\nimport { wordsList } from './data/words';\n\n// components\nimport StartScreen from './components/StartScreen';\nimport Game from './components/Game';\nimport GameOver from './components/GameOver';\n\nconst stages = [\n  {id: 1, name: \"start\"},\n  {id: 2, name: \"game\"},\n  {id: 3, name: \"end\"}\n]\n\nconst guessesNumber = 3;\n\nfunction App() {\n  const [gameStage, setGameStage] = useState(stages[0].name);\n  const [words] = useState(wordsList);\n\n  const [pickedWord, setPickedWord] = useState(\"\");\n  const [pickedCategory, setPickedCategory] = useState(\"\");\n  const [letters, setLetters] = useState([]);\n\n  const [guessedLetters, setGuessedLetters] = useState([]);\n  const [wrongLetters, setWrongLetters] = useState([]);\n  const [guesses, setGuesses] =  useState(guessesNumber);\n  const [score, setScore] = useState(50);\n\n  const pickWordAndCategory = () => {\n    //pick a random category\n    const categories = Object.keys(words);\n    const category = \n      categories[Math.floor(Math.random() * Object.keys(categories).length)];\n\n    //pick a random word\n    const word = \n      words[category][Math.floor(Math.random() * words[category].length)];\n\n    return {word, category};\n  }\n\n  //starts the game\n  const startGame = () => {\n    // pick word and pick category\n    const { word, category } = pickWordAndCategory();\n\n    //create an array of letters\n    let wordLetters = word.split(\"\");\n    wordLetters = wordLetters.map((l) => l.toLowerCase());\n  \n    //fill states\n     setPickedWord(word);\n     setPickedCategory(category);\n     setLetters(wordLetters);\n\n    setGameStage(stages[1].name);\n  }\n\n  //process the letter input\n  const verifyLetter = (letter) => {\n    const normalizedLetter = letter.toLowerCase();\n\n    //check if letter has already been utilized\n    if(\n      guessedLetters.includes(normalizedLetter) || \n      wrongLetters.includes(normalizedLetter)\n    ) {\n      return;\n    }\n\n    //push guessed letter or remove a guess\n    if(letters.includes(normalizedLetter)) {\n      setGuessedLetters((actualGuessedLetters) => [\n        ...actualGuessedLetters,\n        normalizedLetter\n      ])\n    } else {\n      setWrongLetters((actualWrongLetters) => [\n        ...actualWrongLetters,\n        normalizedLetter\n      ])\n\n      setGuesses((actualGuesses) => actualGuesses - 1);\n    }\n  }\n\n  const clearLetterStates = () => {\n    setGuessedLetters([]);\n    setWrongLetters([]);\n  }\n\n  useEffect(() => {\n    if(guesses <= 0) {\n      //reset all states\n      clearLetterStates();\n      setGameStage(stages[2].name);\n    }\n  }, [guesses])\n\n  //restarts the game\n  const retry = () => {\n    setScore(0);\n    setGuesses(guessesNumber);\n\n    setGameStage(stages[0].name);\n  }\n\n  return (\n    <div className=\"App\">\n      {gameStage === 'start' && <StartScreen startGame={startGame}/>}\n      {gameStage === 'game' && (\n        <Game \n          verifyLetter={verifyLetter}\n          pickedWord={pickedWord}\n          pickedCategory={pickedCategory}\n          letters={letters}\n          guessedLetters={guessedLetters}\n          wrongLetters={wrongLetters}\n          guesses={guesses}\n          score={score}\n        />\n      )}\n      {gameStage === 'end' && <GameOver retry={retry} score={score} />}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}